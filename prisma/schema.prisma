// Prisma schema for general billing system (medical/general shop)
// Database: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaxType {
  NONE
  GST
  VAT
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  PARTIALLY_PAID
  PAID
  VOID
}

model Business {
  id          String   @id @default(cuid())
  name        String
  legalName   String?
  gstNumber   String?  @unique
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  country     String?  @default("IN")
  pincode     String?
  currency    String    @default("INR")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  shops       Shop[]
  products    Product[]
  customers   Customer[]
}

model Shop {
  id          String   @id @default(cuid())
  name        String
  businessId  String
  address     String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  invoices    Invoice[]
}

model Product {
  id           String   @id @default(cuid())
  businessId   String
  sku          String?  @unique
  name         String
  description  String?
  unitPrice    Decimal  @db.Decimal(12,2)
  taxRate      Decimal  @db.Decimal(5,2) @default(0.00) // percentage
  taxType      TaxType  @default(GST)
  hsnCode      String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  business     Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  invoiceItems InvoiceItem[]
}

model Customer {
  id          String   @id @default(cuid())
  businessId  String
  name        String
  email       String?
  phone       String?
  gstNumber   String?
  address     String?
  city        String?
  state       String?
  country     String? @default("IN")
  pincode     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  invoices    Invoice[]
}

model Invoice {
  id            String        @id @default(cuid())
  shopId        String
  businessId    String
  customerId    String?
  number        String        @unique
  issueDate     DateTime      @default(now())
  dueDate       DateTime?
  status        InvoiceStatus @default(DRAFT)
  notes         String?

  subTotal      Decimal       @db.Decimal(12,2) @default(0.00)
  discountTotal Decimal       @db.Decimal(12,2) @default(0.00)
  taxTotal      Decimal       @db.Decimal(12,2) @default(0.00)
  grandTotal    Decimal       @db.Decimal(12,2) @default(0.00)
  amountPaid    Decimal       @db.Decimal(12,2) @default(0.00)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer   Customer? @relation(fields: [customerId], references: [id])
  items      InvoiceItem[]
  payments   Payment[]
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  productId   String?
  description String
  quantity    Decimal  @db.Decimal(12,3) @default(1.000)
  unitPrice   Decimal  @db.Decimal(12,2)
  discount    Decimal  @db.Decimal(12,2) @default(0.00)
  taxRate     Decimal  @db.Decimal(5,2) @default(0.00) // percentage captured
  taxType     TaxType  @default(GST)
  lineTotal   Decimal  @db.Decimal(12,2) @default(0.00)

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id])
}

model Payment {
  id         String   @id @default(cuid())
  invoiceId  String
  amount     Decimal  @db.Decimal(12,2)
  method     String   // CASH, CARD, UPI, etc.
  reference  String?
  paidAt     DateTime @default(now())
  notes      String?

  invoice    Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}
